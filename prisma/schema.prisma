datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  // String? is optional/nullable
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid()) 
  title String 
  description String? @db.Text
  videoUrl String? @db.Text 
  position Int 
  isPublished Boolean @default(false) 
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid()) 
  assetId String 
  playbackId String? 

  chapterId String @unique 
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid()) 
  userId String 

  chapterId String 
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  isPaid Boolean @default(false)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid()) 
  userId String @unique
  stripeCustomerId String @unique

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}